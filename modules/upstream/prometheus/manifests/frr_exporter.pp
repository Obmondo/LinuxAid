#
# @summary This module manages prometheus FRR exporter
#
# @param arch
#  Architecture (amd64 or arm64)
# @param bin_dir
#  Directory where binaries are located
# @param download_extension
#  Extension for the release binary archive
# @param download_url
#  Complete URL corresponding to the where the release binary archive can be downloaded
# @param download_url_base
#  Base URL for the binary archive
# @param extra_groups
#  Extra groups to add the binary user to
# @param frr_socket_dir
#  Path to FRR socket directory for BGP monitoring
# @param group
#  Group under which the binary is running
# @param init_style
#  Service startup scripts style (e.g. rc, upstart or systemd)
# @param install_method
#  Installation method: url or package (only url is supported currently)
# @param log_level
#  Log level for the exporter
# @param manage_group
#  Whether to create a group for or rely on external code for that
# @param manage_service
#  Should puppet manage the service? (default true)
# @param manage_user
#  Whether to create user or rely on external code for that
# @param advertised_prefixes
#  Enable BGP advertised prefixes collection
# @param os
#  Operating system (linux is the only one supported)
# @param package_ensure
#  If package, then use this for package ensure default 'latest'
# @param package_name
#  The binary package name - not available yet
# @param peer_descriptions
#  Enable BGP peer descriptions collection
# @param peer_types
#  Enable BGP peer types collection
# @param telemetry_path
#  Path to expose metrics
# @param purge_config_dir
#  Purge config files no longer generated by Puppet
# @param restart_on_change
#  Should puppet restart the service on configuration change? (default true)
# @param service_enable
#  Whether to enable the service from puppet (default true)
# @param service_ensure
#  State ensured for the service (default 'running')
# @param service_name
#  Name of the FRR exporter service
# @param user
#  User which runs the service
# @param version
#  The binary release version
# @param web_listen_address
#  Address to listen on for web interface and telemetry
# @param env_vars
#  hash with custom environment variables thats passed to the exporter via init script / unit file
# @param ensure
#  Whether to install or remove the FRR exporter (default 'present')
#
# @example configure frr_exporter to monitor BGP peers
#  class { 'prometheus::frr_exporter':
#    peer_descriptions    => true,
#    peer_types          => true,
#    advertised_prefixes => true,
#    frr_socket_dir      => '/var/run/frr',
#    web_listen_address  => ':9342',
#  }
#
# @see https://github.com/tynany/frr_exporter
#
# @author Vox Pupuli Team <https://voxpupuli.org/>
#
class prometheus::frr_exporter (
  String $download_extension = 'tar.gz',
  Prometheus::Uri $download_url_base = 'https://github.com/tynany/frr_exporter/releases',
  Array[String] $extra_groups = [],
  String[1] $group = 'frr-exporter',
  String[1] $package_ensure = 'latest',
  String[1] $package_name = 'frr_exporter',
  String[1] $user = 'frr-exporter',
  # renovate: depName=tynany/frr_exporter
  String[1] $version = '1.8.0',
  Boolean $purge_config_dir = true,
  Boolean $restart_on_change = true,
  Boolean $service_enable = true,
  Stdlib::Ensure::Service $service_ensure = 'running',
  String[1] $service_name = 'frr_exporter',
  Prometheus::Initstyle $init_style = $prometheus::init_style,
  Prometheus::Install $install_method = $prometheus::install_method,
  Boolean $manage_group = true,
  Boolean $manage_service = true,
  Boolean $manage_user = true,
  String[1] $os = downcase($facts['kernel']),
  String $arch = $prometheus::real_arch,
  Stdlib::Absolutepath $bin_dir = $prometheus::bin_dir,
  Optional[String] $download_url = undef,
  String $web_listen_address = ':9342',
  String $telemetry_path = '/metrics',
  String $frr_socket_dir = '/var/run/frr',
  Boolean $peer_descriptions = true,
  Boolean $peer_types = true,
  Boolean $advertised_prefixes = false,
  String $log_level = 'info',
  Hash[String[1], Scalar] $env_vars = {},
  Enum['present', 'absent'] $ensure = 'present',
) inherits prometheus {
  $real_download_url = pick($download_url, "${download_url_base}/download/v${version}/${package_name}-${version}.${os}-${arch}.${download_extension}")

  $notify_service = ($restart_on_change and $manage_service) ? {
    true  => Service[$service_name],
    default => undef,
  }

  # Build FRR-specific options
  $_frr_socket_dir_opt = "--frr.socket.dir-path=${frr_socket_dir}"
  $_listen_address_opt = "--web.listen-address=${web_listen_address}"
  $_telemetry_path_opt = "--web.telemetry-path=${telemetry_path}"
  $_log_level_opt = "--log.level=${log_level}"

  # Build collector options array
  $peer_descriptions_opt = $peer_descriptions ? {
    true  => ['--collector.bgp.peer-descriptions'],
    false => [],
  }
  $peer_types_opt = $peer_types ? {
    true  => ['--collector.bgp.peer-types'],
    false => [],
  }
  $advertised_prefixes_opt = $advertised_prefixes ? {
    true  => ['--collector.bgp.advertised-prefixes'],
    false => [],
  }
  $all_collector_opts = $peer_descriptions_opt + $peer_types_opt + $advertised_prefixes_opt

  # Combine all options
  $all_opts = [$_frr_socket_dir_opt, $_listen_address_opt, $_telemetry_path_opt, $_log_level_opt] + $all_collector_opts
  $options = join($all_opts, ' ')

  # Extract port from web_listen_address for scrape configuration  
  $scrape_port_int = Integer(split($web_listen_address, ':')[-1])

  prometheus::daemon { $service_name:
    ensure             => $ensure,
    install_method     => $install_method,
    version            => $version,
    download_extension => $download_extension,
    os                 => $os,
    arch               => $arch,
    real_download_url  => $real_download_url,
    bin_dir            => $bin_dir,
    notify_service     => $notify_service,
    package_name       => $package_name,
    package_ensure     => $package_ensure,
    manage_user        => $manage_user,
    user               => $user,
    extra_groups       => $extra_groups,
    group              => $group,
    manage_group       => $manage_group,
    purge              => $purge_config_dir,
    options            => $options,
    init_style         => $init_style,
    service_ensure     => $service_ensure,
    service_enable     => $service_enable,
    manage_service     => $manage_service,
    env_vars           => $env_vars,
    env_file_path      => $prometheus::env_file_path,
    export_scrape_job  => false,
    scrape_host        => $facts['networking']['fqdn'],
    scrape_port        => $scrape_port_int,
    scrape_job_name    => 'frr',
    scrape_job_labels  => {},
    bin_name           => $package_name,
    archive_bin_path   => "/opt/${package_name}-${version}.${os}-${arch}/${package_name}",
  }
}
