# @summary Network device configuration(Link) Link section definition
# @see https://www.freedesktop.org/software/systemd/man/latest/systemd.link.html
type Systemd::Interface::Link::Link = Struct[{
  'Description'                         => Optional[String[1]],
  'Property'                            => Optional[String[1]],
  'ImportProperty'                      => Optional[String[1]],
  'UnsetProperty'                       => Optional[String[1]],
  'Alias'                               => Optional[String[1]],
  'MACAddressPolicy'                    => Optional[Enum['persistent', 'random', 'none', '']],
  'MACAddress'                          => Optional[String[1]],
  'NamePolicy'                          => Optional[Enum[
    'kernel', 'database', 'onboard', 'slot',
    'path', 'mac', 'keep'
  ]],
  'Name'                                => Optional[String[1]],
  'AlternativeNamesPolicy'              => Optional[String[1]],
  'AlternativeName'                     => Optional[String[1]],
  'TransmitQueues'                      => Optional[Integer[1,4096]],
  'ReceiveQueues'                       => Optional[Integer[1,4096]],
  'TransmitQueueLength'                 => Optional[Integer[0, 4294967294]],
  'MTUBytes'                            => Optional[Integer[1280]],
  'BitsPerSecond'                       => Optional[String[1]],
  'Duplex'                              => Optional[String[1]],
  'AutoNegotiation'                     => Optional[Enum['yes','no']],
  'WakeOnLan'                           => Optional[Enum[
    'phy', 'unicast', 'multicast', 'broadcast',
    'arp', 'magic', 'secureon'
  ]],
  'WakeOnLanPassword'                   => Optional[String[1]],
  'Port'                                => Optional[Enum['tp', 'aui', 'bnc', 'mii', 'fibre']],
  'Advertise'                           => Optional[Variant[
    Systemd::Interface::Link::Link_advertise,
    Array[Systemd::Interface::Link::Link_advertise]
  ]],
  'ReceiveChecksumOffload'              => Optional[Enum['yes','no']],
  'TransmitChecksumOffload'             => Optional[Enum['yes','no']],
  'TCPSegmentationOffload'              => Optional[Enum['yes','no']],
  'TCP6SegmentationOffload'             => Optional[Enum['yes','no']],
  'GenericSegmentationOffload'          => Optional[Enum['yes','no']],
  'GenericReceiveOffload'               => Optional[Enum['yes','no']],
  'LargeReceiveOffload'                 => Optional[Enum['yes','no']],
  'ReceivePacketSteeringCPUMask'        => Optional[String[1]],
  'ReceiveVLANCTAGHardwareAcceleration' => Optional[Enum['yes','no']],
  'TransmitVLANCTAGHardwareAcceleration'=> Optional[Enum['yes','no']],
  'ReceiveVLANCTAGFilter'               => Optional[Enum['yes','no']],
  'TransmitVLANSTAGHardwareAcceleration'=> Optional[Enum['yes','no']],
  'NTupleFilter'                        => Optional[Enum['yes','no']],
  'RxChannels'                          => Optional[Variant[Enum['max'],Integer[1,4294967295]]],
  'TxChannels'                          => Optional[Variant[Enum['max'],Integer[1,4294967295]]],
  'OtherChannels'                       => Optional[Variant[Enum['max'],Integer[1,4294967295]]],
  'CombinedChannels'                    => Optional[Variant[Enum['max'],Integer[1,4294967295]]],
  'RxBufferSize'                        => Optional[Variant[Enum['max'],Integer[1,4294967295]]],
  'RxMiniBufferSize'                    => Optional[Variant[Enum['max'],Integer[1,4294967295]]],
  'RxJumboBufferSize'                   => Optional[Variant[Enum['max'],Integer[1,4294967295]]],
  'TxBufferSize'                        => Optional[Variant[Enum['max'],Integer[1,4294967295]]],
  'RxFlowControl'                       => Optional[Enum['yes','no']],
  'TxFlowControl'                       => Optional[Enum['yes','no']],
  'AutoNegotiationFlowControl'          => Optional[Enum['yes','no']],
  'GenericSegmentOffloadMaxBytes'       => Optional[String[1]],
  'GenericSegmentOffloadMaxSegments'    => Optional[Integer[1, 65535]],
  'UseAdaptiveRxCoalesce'               => Optional[Enum['yes','no']],
  'UseAdaptiveTxCoalesce'               => Optional[Enum['yes','no']],
  'RxCoalesceSec'                       => Optional[Integer],
  'RxCoalesceIrqSec'                    => Optional[Integer],
  'RxCoalesceLowSec'                    => Optional[Integer],
  'RxCoalesceHighSec'                   => Optional[Integer],
  'TxCoalesceSec'                       => Optional[Integer],
  'TxCoalesceIrqSec'                    => Optional[Integer],
  'TxCoalesceLowSec'                    => Optional[Integer],
  'TxCoalesceHighSec'                   => Optional[Integer],
  'RxMaxCoalescedFrames'                => Optional[Integer],
  'RxMaxCoalescedIrqFrames'             => Optional[Integer],
  'RxMaxCoalescedLowFrames'             => Optional[Integer],
  'RxMaxCoalescedHighFrames'            => Optional[Integer],
  'TxMaxCoalescedFrames'                => Optional[Integer],
  'TxMaxCoalescedIrqFrames'             => Optional[Integer],
  'TxMaxCoalescedLowFrames'             => Optional[Integer],
  'TxMaxCoalescedHighFrames'            => Optional[Integer],
  'CoalescePacketRateLow'               => Optional[Integer],
  'CoalescePacketRateHigh'              => Optional[Integer],
  'CoalescePacketRateSampleIntervalSec' => Optional[Integer],
  'StatisticsBlockCoalesceSec'          => Optional[Integer[1]],
  'MDI'                                 => Optional[Enum['straight', 'mdi', 'crossover', 'mdi-x', 'mdix', 'auto']],
  'SR_IOVVirtualFunctions'              => Optional[Integer[0, 2147483647]],
}]
