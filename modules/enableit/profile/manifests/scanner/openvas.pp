class profile::scanner::openvas (
  Stdlib::Absolutepath   $install_dir                  = $role::scanner::openvas::install_dir,
  Boolean                $install                      = $role::scanner::openvas::install,
  Stdlib::Host           $web_bind_address             = $role::scanner::openvas::web_bind_address,
  Stdlib::Port           $web_port                     = $role::scanner::openvas::web_port,
  Enum['service_notus']  $openvasd_mode                = $role::scanner::openvas::openvasd_mode,
  Eit_types::Addressport $openvasd_addressport         = $role::scanner::openvas::openvasd_addressport,
  Stdlib::Absolutepath   $storage_path                 = $role::scanner::openvas::storage_path,
  String                 $registry                     = $role::scanner::openvas::registry,
  Eit_types::Version     $vulnerability_tests_version  = $role::scanner::openvas::vulnerability_tests_version,
  Eit_types::Version     $notus_data_version           = $role::scanner::openvas::notus_data_version,
  Eit_types::Version     $scap_data_version            = $role::scanner::openvas::scap_data_version,
  Eit_types::Version     $cert_bund_data_version       = $role::scanner::openvas::cert_bund_data_version,
  Eit_types::Version     $dfn_cert_data_version        = $role::scanner::openvas::dfn_cert_data_version,
  Eit_types::Version     $data_objects_version         = $role::scanner::openvas::data_objects_version,
  Eit_types::Version     $report_formats_version       = $role::scanner::openvas::report_formats_version,
  Eit_types::Version     $gpg_data_version             = $role::scanner::openvas::gpg_data_version,
  Eit_types::Version     $redis_server_version         = $role::scanner::openvas::redis_server_version,
  Eit_types::Version     $pg_gvm_version               = $role::scanner::openvas::pg_gvm_version,
  Eit_types::Version     $gsa_version                  = $role::scanner::openvas::gsa_version,
  Eit_types::Version     $gvmd_version                 = $role::scanner::openvas::gvmd_version,
  Eit_types::Version     $openvas_scanner_version      = $role::scanner::openvas::openvas_scanner_version,
  Eit_types::Version     $ospd_openvas_version         = $role::scanner::openvas::ospd_openvas_version,
  Eit_types::Version     $gvm_tools_version            = $role::scanner::openvas::gvm_tools_version,
  Eit_types::Version     $feed_release_version         = $role::scanner::openvas::feed_release_version,
  Stdlib::Absolutepath   $data_mount_path              = $role::scanner::openvas::data_mount_path,
  Stdlib::Absolutepath   $gvm_data_path                = $role::scanner::openvas::gvm_data_path,
  Stdlib::Absolutepath   $openvas_plugins_path         = $role::scanner::openvas::openvas_plugins_path,
  Stdlib::Absolutepath   $redis_socket_path            = $role::scanner::openvas::redis_socket_path,
  Stdlib::Absolutepath   $gvmd_socket_path             = $role::scanner::openvas::gvmd_socket_path,
  Stdlib::Absolutepath   $ospd_socket_path             = $role::scanner::openvas::ospd_socket_path,
  Stdlib::Absolutepath   $psql_data_path               = $role::scanner::openvas::psql_data_path,
  Stdlib::Absolutepath   $psql_socket_path             = $role::scanner::openvas::psql_socket_path,
  Stdlib::Absolutepath   $openvas_config_path          = $role::scanner::openvas::openvas_config_path,
  Stdlib::Absolutepath   $openvas_log_path             = $role::scanner::openvas::openvas_log_path,
  Stdlib::Absolutepath   $notus_path                   = $role::scanner::openvas::notus_path,
) {
  file { $install_dir:
    ensure => ensure_dir($install),
    owner  => 'root',
    group  => 'root',
    mode   => '0755',
  }

  file { "${install_dir}/docker-compose.yml":
    ensure  => ensure_present($install),
    owner   => 'root',
    group   => 'root',
    mode    => '0644',
    content => epp('profile/scanner/openvas/docker-compose.yaml.epp', {
      web_bind_address            => $web_bind_address,
      web_port                    => $web_port,
      openvasd_mode               => $openvasd_mode,
      openvasd_addressport        => $openvasd_addressport,
      storage_path                => $storage_path,
      registry                    => $registry,
      vulnerability_tests_version => $vulnerability_tests_version,
      notus_data_version          => $notus_data_version,
      scap_data_version           => $scap_data_version,
      cert_bund_data_version      => $cert_bund_data_version,
      dfn_cert_data_version       => $dfn_cert_data_version,
      data_objects_version        => $data_objects_version,
      report_formats_version      => $report_formats_version,
      gpg_data_version            => $gpg_data_version,
      redis_server_version        => $redis_server_version,
      pg_gvm_version              => $pg_gvm_version,
      gsa_version                 => $gsa_version,
      gvmd_version                => $gvmd_version,
      openvas_scanner_version     => $openvas_scanner_version,
      ospd_openvas_version        => $ospd_openvas_version,
      gvm_tools_version           => $gvm_tools_version,
      feed_release_version        => $feed_release_version,
      data_mount_path             => $data_mount_path,
      gvm_data_path               => $gvm_data_path,
      openvas_plugins_path        => $openvas_plugins_path,
      redis_socket_path           => $redis_socket_path,
      gvmd_socket_path            => $gvmd_socket_path,
      ospd_socket_path            => $ospd_socket_path,
      psql_data_path              => $psql_data_path,
      psql_socket_path            => $psql_socket_path,
      openvas_config_path         => $openvas_config_path,
      openvas_log_path            => $openvas_log_path,
      notus_path                  => $notus_path,
    }),
    require => File[$install_dir],
  }

  firewall_multi { '000 allow openvas web interface':
    ensure => ensure_present($install),
    dport  => [$web_port],
    proto  => 'tcp',
    jump   => 'accept',
  }

  docker_compose { 'openvas':
    ensure        => ensure_present($install),
    compose_files => [
      "${install_dir}/docker-compose.yml",
    ],
    require       => File["${install_dir}/docker-compose.yml"],
  }
}
