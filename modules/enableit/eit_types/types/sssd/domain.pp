type Eit_types::Sssd::Domain = Struct[
  {
    'access_provider'                         => Enum['ad', 'simple'],
    'ad_domain'                               => Eit_types::Domain,
    'ad_gpo_access_control'                   => Enum['disabled', 'enforcing', 'permissive'],
    'ad_gpo_cache_timeout'                    => Eit_types::Duration::Seconds,
    'ad_gpo_ignore_unreadable'                => Boolean,
    'ad_maximum_machine_account_password_age' => Eit_types::Duration::Days,
    # ad_server is an optional, because service discovery can find the nodes
    'ad_server'                               => Optional[Array[Stdlib::Host]],
    'auth_provider'                           => Optional[Enum['ad']],
    'cache_credentials'                       => Boolean,
    'case_sensitive'                          => Optional[Boolean],
    'create_homedir'                          => Boolean,
    'default_shell'                           => Stdlib::Absolutepath,
    'default_domain_suffix'                   => Optional[Variant[Boolean, Eit_types::Domain]],
    'enumerate'                               => Boolean,
    'fallback_homedir'                        => Stdlib::Absolutepath,
    'id_provider'                             => Optional[Enum['ad']],
    'krb5_realm'                              => Eit_types::Domain,
    'krb5_store_password_if_offline'          => Boolean,
    'ldap_id_mapping'                         => Boolean,
    'ldap_uri'                                => Optional[Eit_types::URL],
    'ldap_schema'                             => Optional[Enum['ad']],
    'realmd_tags'                             => Array[String],
    'remove_homedir'                          => Boolean,
    'simple_allow_groups'                     => Optional[Array[Eit_types::Group]],
    'use_fully_qualified_names'               => Boolean,
    'timeout'                                 => Integer,
  }]
