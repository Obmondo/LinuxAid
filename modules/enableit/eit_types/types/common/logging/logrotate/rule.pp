type Eit_types::Common::Logging::Logrotate::Rule = Struct[{
  ensure          => Enum['present','absent'],
  compress        => Optional[Boolean],
  compresscmd     => Optional[String],
  compressext     => Optional[String],
  compressoptions => Optional[String],
  copy            => Optional[Boolean],
  copytruncate    => Optional[Boolean],
  create          => Optional[Boolean],
  create_mode     => Optional[Stdlib::FileMode],
  create_owner    => Optional[Eit_types::User],
  create_group    => Optional[Eit_types::User],
  dateext         => Optional[Boolean],
  dateyesterday   => Optional[Boolean],
  delaycompress   => Optional[Boolean],
  extension       => Optional[String],
  firstaction     => Optional[Logrotate::Commands],
  ifempty         => Optional[Boolean],
  lastaction      => Optional[Logrotate::Commands],
  mail            => Optional[Eit_types::Email],
  maxage          => Optional[Integer],
  maxsize         => Optional[Logrotate::Size],
  minsize         => Optional[Logrotate::Size],
  missingok       => Optional[Boolean],
  olddir          => Optional[Variant[Boolean,String]],
  path            => Optional[Logrotate::Path],
  postrotate      => Optional[Logrotate::Commands],
  prerotate       => Optional[Logrotate::Commands],
  rotate          => Integer,
  rotate_every    => Logrotate::Every,
  sharedscripts   => Optional[Boolean],
  shred           => Optional[Boolean],
  shredcycles     => Optional[Integer],
  size            => Optional[Logrotate::Size],
  start           => Optional[Integer],
  su_owner        => Optional[Eit_types::User],
  su_group        => Optional[Eit_types::User],
  uncompresscmd   => Optional[String],
}]
