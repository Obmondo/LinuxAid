# ELK role
class role::monitoring::elk (
  Pattern[/[A-Za-z0-9_.-]+/] $clustername                         = 'elkstack',
  Hash[String, Data] $es_config                                   = {},
  Variant[Pattern[/\d\.\d\.\d/], Enum['2.x', '5.x']] $es_version  = undef,
  Stdlib::Absolutepath $es_datadir                                = '/var/lib/elasticsearch/data',
  Array[Eit_types::IP] $cluster_hosts                             = [$facts['networking']['ip']],
  Boolean $nxlog_windowseventlog                                  = false,
  Boolean $nxlog_ssl_windowseventlog                              = false,
  Boolean $nxlog_json                                             = false,
  Boolean $nxlog_ssl_json                                         = false,
  Hash $nginx_cfg_append                                          = {},
  Variant[Boolean, Enum['force']] $nginx_ssl_mode                 = 'force',
  Optional[Stdlib::Absolutepath] $ssl_cert                        = undef,
  Optional[Stdlib::Absolutepath] $ssl_key                         = undef,
  Boolean $install_cerebro                                        = true,
  Boolean $enable_redis                                           = true,
  Stdlib::Absolutepath $redis_datadir                             = '/var/lib/redis',
  Array[Variant[Eit_types::IPPort, Eit_types::IP], 1] $redis_bind = ['127.0.0.1'],
  Stdlib::Port $redis_port                                        = 6379,
  Optional[Integer] $logstash_redis_to_es_workers                 = undef,
  Boolean $install_search_guard                                   = false,
  Boolean $curator                                                = false,
  Integer $curator_delete_days                                    = 7,
) inherits ::role::monitoring {

  class { 'profile::elk':
    clustername               => $clustername,
    es_version                => $es_version,
    es_config                 => $es_config,
    es_datadir                => $es_datadir,
    cluster_hosts             => $cluster_hosts,
    nxlog_windowseventlog     => $nxlog_windowseventlog,
    nxlog_ssl_windowseventlog => $nxlog_ssl_windowseventlog,
    nxlog_json                => $nxlog_json,
    nxlog_ssl_json            => $nxlog_ssl_json,
    nginx_cfg_append          => $nginx_cfg_append,
    nginx_ssl_mode            => $nginx_ssl_mode,
    ssl_cert                  => $ssl_cert,
    ssl_key                   => $ssl_key,
    install_cerebro           => $install_cerebro,
    enable_redis              => $enable_redis,
    redis_datadir             => $redis_datadir,
    redis_bind                => $redis_bind,
    redis_port                => $redis_port,
    curator                   => $curator,
    curator_delete_days       => $curator_delete_days,
  }

}
